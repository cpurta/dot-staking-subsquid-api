// This file has been auto-generated by Warthog.  Do not update directly as it
// will be re-written.  If you need to change this file, update models or add
// new TypeGraphQL objects
// prettier-ignore
// @ts-ignore
import { DateResolver as Date } from 'graphql-scalars';
// prettier-ignore
// @ts-ignore
import { GraphQLID as ID } from 'graphql';
// prettier-ignore
// @ts-ignore
import { ArgsType, Field as TypeGraphQLField, Float, InputType as TypeGraphQLInputType, Int } from 'type-graphql';
// prettier-ignore
// @ts-ignore
import { registerEnumType, GraphQLISODateTime as DateTime } from "type-graphql";

import * as BN from "bn.js";

// prettier-ignore
// @ts-ignore eslint-disable-next-line @typescript-eslint/no-var-requires
const { GraphQLJSONObject } = require('graphql-type-json');
// prettier-ignore
// @ts-ignore
import { BaseWhereInput, JsonObject, PaginationArgs, DateOnlyString, DateTimeString, BigInt, Bytes } from '@subsquid/warthog';

// @ts-ignore
import { NoBondRecordAccount } from "../modules/no-bond-record-account/no-bond-record-account.model";
// @ts-ignore
import { StakingSlash } from "../modules/staking-slash/staking-slash.model";
// @ts-ignore
import { SumReward } from "../modules/sum-reward/sum-reward.model";
// @ts-ignore
import { StakingReward } from "../modules/staking-reward/staking-reward.model";

export enum NoBondRecordAccountOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  firstRewardAt_ASC = "firstRewardAt_ASC",
  firstRewardAt_DESC = "firstRewardAt_DESC",
}

registerEnumType(NoBondRecordAccountOrderByEnum, {
  name: "NoBondRecordAccountOrderByInput",
});

@TypeGraphQLInputType()
export class NoBondRecordAccountWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField(() => Int, { nullable: true })
  firstRewardAt_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  firstRewardAt_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  firstRewardAt_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  firstRewardAt_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  firstRewardAt_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  firstRewardAt_in?: number[];

  @TypeGraphQLField(() => NoBondRecordAccountWhereInput, { nullable: true })
  AND?: [NoBondRecordAccountWhereInput];

  @TypeGraphQLField(() => NoBondRecordAccountWhereInput, { nullable: true })
  OR?: [NoBondRecordAccountWhereInput];
}

@TypeGraphQLInputType()
export class NoBondRecordAccountWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class NoBondRecordAccountCreateInput {
  @TypeGraphQLField()
  firstRewardAt!: number;
}

@TypeGraphQLInputType()
export class NoBondRecordAccountUpdateInput {
  @TypeGraphQLField({ nullable: true })
  firstRewardAt?: number;
}

@ArgsType()
export class NoBondRecordAccountWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => NoBondRecordAccountWhereInput, { nullable: true })
  where?: NoBondRecordAccountWhereInput;

  @TypeGraphQLField(() => NoBondRecordAccountOrderByEnum, { nullable: true })
  orderBy?: NoBondRecordAccountOrderByEnum[];
}

@ArgsType()
export class NoBondRecordAccountCreateManyArgs {
  @TypeGraphQLField(() => [NoBondRecordAccountCreateInput])
  data!: NoBondRecordAccountCreateInput[];
}

@ArgsType()
export class NoBondRecordAccountUpdateArgs {
  @TypeGraphQLField() data!: NoBondRecordAccountUpdateInput;
  @TypeGraphQLField() where!: NoBondRecordAccountWhereUniqueInput;
}

export enum StakingSlashOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  account_ASC = "account_ASC",
  account_DESC = "account_DESC",

  balance_ASC = "balance_ASC",
  balance_DESC = "balance_DESC",

  date_ASC = "date_ASC",
  date_DESC = "date_DESC",
}

registerEnumType(StakingSlashOrderByEnum, {
  name: "StakingSlashOrderByInput",
});

@TypeGraphQLInputType()
export class StakingSlashWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balance_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balance_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balance_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balance_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balance_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  balance_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  date_eq?: DateTimeString;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  date_lt?: DateTimeString;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  date_lte?: DateTimeString;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  date_gt?: DateTimeString;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  date_gte?: DateTimeString;

  @TypeGraphQLField(() => SumRewardWhereInput, { nullable: true })
  account?: SumRewardWhereInput;

  @TypeGraphQLField(() => StakingSlashWhereInput, { nullable: true })
  AND?: [StakingSlashWhereInput];

  @TypeGraphQLField(() => StakingSlashWhereInput, { nullable: true })
  OR?: [StakingSlashWhereInput];
}

@TypeGraphQLInputType()
export class StakingSlashWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class StakingSlashCreateInput {
  @TypeGraphQLField(() => ID)
  account!: string;

  @TypeGraphQLField()
  balance!: string;

  @TypeGraphQLField(() => DateTime)
  date!: DateTimeString;
}

@TypeGraphQLInputType()
export class StakingSlashUpdateInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  account?: string;

  @TypeGraphQLField({ nullable: true })
  balance?: string;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  date?: DateTimeString;
}

@ArgsType()
export class StakingSlashWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => StakingSlashWhereInput, { nullable: true })
  where?: StakingSlashWhereInput;

  @TypeGraphQLField(() => StakingSlashOrderByEnum, { nullable: true })
  orderBy?: StakingSlashOrderByEnum[];
}

@ArgsType()
export class StakingSlashCreateManyArgs {
  @TypeGraphQLField(() => [StakingSlashCreateInput])
  data!: StakingSlashCreateInput[];
}

@ArgsType()
export class StakingSlashUpdateArgs {
  @TypeGraphQLField() data!: StakingSlashUpdateInput;
  @TypeGraphQLField() where!: StakingSlashWhereUniqueInput;
}

export enum SumRewardOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  accountReward_ASC = "accountReward_ASC",
  accountReward_DESC = "accountReward_DESC",

  accountSlash_ASC = "accountSlash_ASC",
  accountSlash_DESC = "accountSlash_DESC",

  accountTotal_ASC = "accountTotal_ASC",
  accountTotal_DESC = "accountTotal_DESC",
}

registerEnumType(SumRewardOrderByEnum, {
  name: "SumRewardOrderByInput",
});

@TypeGraphQLInputType()
export class SumRewardWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  accountReward_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  accountReward_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  accountReward_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  accountReward_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  accountReward_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  accountReward_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  accountSlash_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  accountSlash_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  accountSlash_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  accountSlash_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  accountSlash_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  accountSlash_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  accountTotal_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  accountTotal_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  accountTotal_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  accountTotal_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  accountTotal_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  accountTotal_in?: string[];

  @TypeGraphQLField(() => StakingRewardWhereInput, { nullable: true })
  rewards_none?: StakingRewardWhereInput;

  @TypeGraphQLField(() => StakingRewardWhereInput, { nullable: true })
  rewards_some?: StakingRewardWhereInput;

  @TypeGraphQLField(() => StakingRewardWhereInput, { nullable: true })
  rewards_every?: StakingRewardWhereInput;

  @TypeGraphQLField(() => StakingSlashWhereInput, { nullable: true })
  slashs_none?: StakingSlashWhereInput;

  @TypeGraphQLField(() => StakingSlashWhereInput, { nullable: true })
  slashs_some?: StakingSlashWhereInput;

  @TypeGraphQLField(() => StakingSlashWhereInput, { nullable: true })
  slashs_every?: StakingSlashWhereInput;

  @TypeGraphQLField(() => SumRewardWhereInput, { nullable: true })
  AND?: [SumRewardWhereInput];

  @TypeGraphQLField(() => SumRewardWhereInput, { nullable: true })
  OR?: [SumRewardWhereInput];
}

@TypeGraphQLInputType()
export class SumRewardWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class SumRewardCreateInput {
  @TypeGraphQLField()
  accountReward!: string;

  @TypeGraphQLField()
  accountSlash!: string;

  @TypeGraphQLField()
  accountTotal!: string;
}

@TypeGraphQLInputType()
export class SumRewardUpdateInput {
  @TypeGraphQLField({ nullable: true })
  accountReward?: string;

  @TypeGraphQLField({ nullable: true })
  accountSlash?: string;

  @TypeGraphQLField({ nullable: true })
  accountTotal?: string;
}

@ArgsType()
export class SumRewardWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => SumRewardWhereInput, { nullable: true })
  where?: SumRewardWhereInput;

  @TypeGraphQLField(() => SumRewardOrderByEnum, { nullable: true })
  orderBy?: SumRewardOrderByEnum[];
}

@ArgsType()
export class SumRewardCreateManyArgs {
  @TypeGraphQLField(() => [SumRewardCreateInput])
  data!: SumRewardCreateInput[];
}

@ArgsType()
export class SumRewardUpdateArgs {
  @TypeGraphQLField() data!: SumRewardUpdateInput;
  @TypeGraphQLField() where!: SumRewardWhereUniqueInput;
}

export enum StakingRewardOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  account_ASC = "account_ASC",
  account_DESC = "account_DESC",

  balance_ASC = "balance_ASC",
  balance_DESC = "balance_DESC",

  date_ASC = "date_ASC",
  date_DESC = "date_DESC",
}

registerEnumType(StakingRewardOrderByEnum, {
  name: "StakingRewardOrderByInput",
});

@TypeGraphQLInputType()
export class StakingRewardWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balance_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balance_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balance_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balance_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balance_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  balance_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  date_eq?: DateTimeString;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  date_lt?: DateTimeString;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  date_lte?: DateTimeString;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  date_gt?: DateTimeString;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  date_gte?: DateTimeString;

  @TypeGraphQLField(() => SumRewardWhereInput, { nullable: true })
  account?: SumRewardWhereInput;

  @TypeGraphQLField(() => StakingRewardWhereInput, { nullable: true })
  AND?: [StakingRewardWhereInput];

  @TypeGraphQLField(() => StakingRewardWhereInput, { nullable: true })
  OR?: [StakingRewardWhereInput];
}

@TypeGraphQLInputType()
export class StakingRewardWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class StakingRewardCreateInput {
  @TypeGraphQLField(() => ID)
  account!: string;

  @TypeGraphQLField()
  balance!: string;

  @TypeGraphQLField(() => DateTime)
  date!: DateTimeString;
}

@TypeGraphQLInputType()
export class StakingRewardUpdateInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  account?: string;

  @TypeGraphQLField({ nullable: true })
  balance?: string;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  date?: DateTimeString;
}

@ArgsType()
export class StakingRewardWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => StakingRewardWhereInput, { nullable: true })
  where?: StakingRewardWhereInput;

  @TypeGraphQLField(() => StakingRewardOrderByEnum, { nullable: true })
  orderBy?: StakingRewardOrderByEnum[];
}

@ArgsType()
export class StakingRewardCreateManyArgs {
  @TypeGraphQLField(() => [StakingRewardCreateInput])
  data!: StakingRewardCreateInput[];
}

@ArgsType()
export class StakingRewardUpdateArgs {
  @TypeGraphQLField() data!: StakingRewardUpdateInput;
  @TypeGraphQLField() where!: StakingRewardWhereUniqueInput;
}
